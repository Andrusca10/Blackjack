import random
from enum import Enum

class Carte:
    def __init__(self, valoare, tip):
        self.valoare = valoare
        self.tip = tip

    def __str__(self):
         return f"{self.valoare} de {self.tip.value}"

class TipCarte(Enum):
    INIMA_ROSIE = "Inima rosie"
    INIMA_NEAGRA = "Inima neagra"
    ROMB = "Romb"
    TREFLA = "Trefla"

class TipJucator(Enum):
    JUCATOR = "jucator"
    DEALER = "dealer"


class Pachet:
    def __init__(self):
        self.carti = []
        tip = list(TipCarte)
        for t in tip:
            for val in range(2, 15):
                self.carti.append(Carte(val, t))

    def __str__(self):
        return ", ".join([str(carte) for carte in self.carti])


    def shuffle(self):
        random.shuffle(self.carti)

    def draw(self):
        return self.carti.pop()


class Jucator():
    def __init__(self, tip_jucator):
        self.carti = []
        self.tip_jucator = tip_jucator

    def draw(self, deck):
        alegere = False
        carte = deck.draw()
        if carte.valoare == 11:
            while not alegere:
                try:
                    choice = int(input("Alege valoarea cartii(1 sau 11): "))
                    if choice == 1 or choice == 11:
                        carte.valoare = choice
                        alegere = True
                    else:
                        print("Alege doar intre 1 si 11.")
                except Exception:
                    print("Valoarea nu este corecta.")
        self.carti.append(carte)

    def suma_carti(self):
        suma = 0
        for carte in self.carti:
            if carte.valoare >= 12:
                suma += 10
            else:
                suma += carte.valoare
        return suma

    def hit(self, deck):
        self.draw(deck)
        alegere = False
        while self.suma_carti() <= 21 and not alegere:
            print(f"Cartile sunt: {', '.join([str(carte) for carte in self.carti])}")
            action = input("Continue or not? ")
            if action == "y":
                self.draw(deck)
                print(f"Total puncte: {self.suma_carti()}")
            elif action == "n":
                alegere = True
                print(f"Total puncte: {self.suma_carti()} cu cartile: {', '.join([str(carte) for carte in self.carti])}.")


def main():
    j1 = Jucator(TipJucator.JUCATOR)
    d = Jucator(TipJucator.DEALER)
    pachet = Pachet()
    pachet.shuffle()
    pachet.draw()
    j1.draw(pachet)
    j1.hit(pachet)
    if j1.suma_carti() == 21:
        print("Super! Ai 21 puncte")
    if j1.suma_carti() > 21:
        print("Ne pare rau, dar ai piedut!")
        return
    else:
        d.draw(pachet)
        d.hit(pachet)
    if j1.suma_carti() > d.suma_carti() and j1.suma_carti() <= 21:
        print(f"Ai castigat. Suma cartilor tale este {j1.suma_carti()}, iar dealer-ul a avut totalul de {d.suma_carti()}")
    if j1.suma_carti() < d.suma_carti() and d.suma_carti() > 21:
        print(f"Ai castigat. Totalul punctelor tale este {j1.suma_carti()}, iar a dealer-ului este: {d.suma_carti()}")
    else:
        print(f"A castigat Dealerul cu totalul de {d.suma_carti()} puncte.")


if __name__ == '__main__':
    main()

